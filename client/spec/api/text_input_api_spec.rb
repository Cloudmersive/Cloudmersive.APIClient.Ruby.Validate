=begin
#validateapi

#The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudmersiveValidateApiClient::TextInputApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TextInputApi' do
  before do
    # run before each test
    @instance = CloudmersiveValidateApiClient::TextInputApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TextInputApi' do
    it 'should create an instance of TextInputApi' do
      expect(@instance).to be_instance_of(CloudmersiveValidateApiClient::TextInputApi)
    end
  end

  # unit tests for text_input_check_html_ssrf
  # Protect html input from Server-side Request Forgery (SSRF) attacks
  # Detects SSRF (Server-side request forgery) attacks and unsafe URL attacks from HTML text input, where attackers can attempt to access unsafe local or network paths in the server environment by injecting them into HTML.
  # @param value User-facing HTML input.
  # @param [Hash] opts the optional parameters
  # @return [HtmlSsrfDetectionResult]
  describe 'text_input_check_html_ssrf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for text_input_check_sql_injection
  # Check text input for SQL Injection (SQLI) attacks
  # Detects SQL Injection (SQLI) attacks from text input.
  # @param value User-facing text input.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :detection_level Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended).
  # @return [SqlInjectionDetectionResult]
  describe 'text_input_check_sql_injection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for text_input_check_sql_injection_batch
  # Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch
  # Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
  # @param value User-facing text input.
  # @param [Hash] opts the optional parameters
  # @return [SqlInjectionCheckBatchResponse]
  describe 'text_input_check_sql_injection_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for text_input_check_xss
  # Check text input for Cross-Site-Scripting (XSS) attacks
  # Detects XSS (Cross-Site-Scripting) attacks from text input.
  # @param value User-facing text input.
  # @param [Hash] opts the optional parameters
  # @return [XssProtectionResult]
  describe 'text_input_check_xss test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for text_input_check_xss_batch
  # Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch
  # Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
  # @param value User-facing text input.
  # @param [Hash] opts the optional parameters
  # @return [XssProtectionBatchResponse]
  describe 'text_input_check_xss_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for text_input_check_xxe
  # Protect text input from XML External Entity (XXE) attacks
  # Detects XXE (XML External Entity) attacks from text input.
  # @param value User-facing text input.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :allow_internet_urls Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false.
  # @option opts [String] :known_safe_urls Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe.
  # @option opts [String] :known_unsafe_urls Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe.
  # @return [XxeDetectionResult]
  describe 'text_input_check_xxe test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for text_input_check_xxe_batch
  # Protect text input from XML External Entity (XXE) attacks
  # Detects XXE (XML External Entity) attacks from text input.
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [XxeDetectionBatchResponse]
  describe 'text_input_check_xxe_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for text_input_protect_xss
  # Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
  # Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
  # @param value User-facing text input.
  # @param [Hash] opts the optional parameters
  # @return [XssProtectionResult]
  describe 'text_input_protect_xss test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
