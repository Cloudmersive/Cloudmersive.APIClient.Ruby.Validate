=begin
#validateapi

#The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module CloudmersiveValidateApiClient
  # Result of performing a country validation operation
  class ValidateCountryResponse
    # True if successful, false otherwise
    attr_accessor :successful

    # Full name of the country
    attr_accessor :country_full_name

    # Two-letter ISO 3166-1 country code
    attr_accessor :iso_two_letter_code

    # Two-letter FIPS 10-4 country code
    attr_accessor :fips_two_letter_code

    # Three-letter ISO 3166-1 country code
    attr_accessor :three_letter_code

    # True if this country is currently a member of the European Union (EU), false otherwise
    attr_accessor :is_european_union_member

    # Time zones (IANA/Olsen) in the country
    attr_accessor :timezones

    # ISO 4217 currency three-letter code associated with the country
    attr_accessor :iso_currency_code

    # Symbol associated with the currency
    attr_accessor :currency_symbol

    # Full name of the currency
    attr_accessor :currency_english_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'successful' => :'Successful',
        :'country_full_name' => :'CountryFullName',
        :'iso_two_letter_code' => :'ISOTwoLetterCode',
        :'fips_two_letter_code' => :'FIPSTwoLetterCode',
        :'three_letter_code' => :'ThreeLetterCode',
        :'is_european_union_member' => :'IsEuropeanUnionMember',
        :'timezones' => :'Timezones',
        :'iso_currency_code' => :'ISOCurrencyCode',
        :'currency_symbol' => :'CurrencySymbol',
        :'currency_english_name' => :'CurrencyEnglishName'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'successful' => :'BOOLEAN',
        :'country_full_name' => :'String',
        :'iso_two_letter_code' => :'String',
        :'fips_two_letter_code' => :'String',
        :'three_letter_code' => :'String',
        :'is_european_union_member' => :'BOOLEAN',
        :'timezones' => :'Array<Timezone>',
        :'iso_currency_code' => :'String',
        :'currency_symbol' => :'String',
        :'currency_english_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'Successful')
        self.successful = attributes[:'Successful']
      end

      if attributes.has_key?(:'CountryFullName')
        self.country_full_name = attributes[:'CountryFullName']
      end

      if attributes.has_key?(:'ISOTwoLetterCode')
        self.iso_two_letter_code = attributes[:'ISOTwoLetterCode']
      end

      if attributes.has_key?(:'FIPSTwoLetterCode')
        self.fips_two_letter_code = attributes[:'FIPSTwoLetterCode']
      end

      if attributes.has_key?(:'ThreeLetterCode')
        self.three_letter_code = attributes[:'ThreeLetterCode']
      end

      if attributes.has_key?(:'IsEuropeanUnionMember')
        self.is_european_union_member = attributes[:'IsEuropeanUnionMember']
      end

      if attributes.has_key?(:'Timezones')
        if (value = attributes[:'Timezones']).is_a?(Array)
          self.timezones = value
        end
      end

      if attributes.has_key?(:'ISOCurrencyCode')
        self.iso_currency_code = attributes[:'ISOCurrencyCode']
      end

      if attributes.has_key?(:'CurrencySymbol')
        self.currency_symbol = attributes[:'CurrencySymbol']
      end

      if attributes.has_key?(:'CurrencyEnglishName')
        self.currency_english_name = attributes[:'CurrencyEnglishName']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          successful == o.successful &&
          country_full_name == o.country_full_name &&
          iso_two_letter_code == o.iso_two_letter_code &&
          fips_two_letter_code == o.fips_two_letter_code &&
          three_letter_code == o.three_letter_code &&
          is_european_union_member == o.is_european_union_member &&
          timezones == o.timezones &&
          iso_currency_code == o.iso_currency_code &&
          currency_symbol == o.currency_symbol &&
          currency_english_name == o.currency_english_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [successful, country_full_name, iso_two_letter_code, fips_two_letter_code, three_letter_code, is_european_union_member, timezones, iso_currency_code, currency_symbol, currency_english_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudmersiveValidateApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
