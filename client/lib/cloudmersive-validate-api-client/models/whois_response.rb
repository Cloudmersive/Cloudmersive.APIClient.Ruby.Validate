=begin
#validateapi

#The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module CloudmersiveValidateApiClient
  # Result of a WHOIS operation
  class WhoisResponse
    # True if the domain is valid, false if it is not
    attr_accessor :valid_domain

    # Name of the domain registrant
    attr_accessor :registrant_name

    # Organization name of the domain registrant
    attr_accessor :registrant_organization

    # Email address of the domain registrant
    attr_accessor :registrant_email

    # Street number of the address of the domain registrant, if available
    attr_accessor :registrant_street_number

    # Street name of the address of the domain registrant, if available
    attr_accessor :registrant_street

    # City of the domain registrant, if available
    attr_accessor :registrant_city

    # State or Province of the address of the domain registrant, if available
    attr_accessor :registrant_state_or_province

    # Postal code of the address of the domain registrant, if available
    attr_accessor :registrant_postal_code

    # Country of the address of the domain registrant, if available
    attr_accessor :registrant_country

    # Raw address string of the domain registrant, if available
    attr_accessor :registrant_raw_address

    # Telephone number of the address of the domain registrant
    attr_accessor :registrant_telephone

    # Server used to lookup WHOIS information (may change based on lookup).
    attr_accessor :whois_server

    # WHOIS raw text record
    attr_accessor :raw_text_record

    # Creation date for the record
    attr_accessor :created_dt

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'valid_domain' => :'ValidDomain',
        :'registrant_name' => :'RegistrantName',
        :'registrant_organization' => :'RegistrantOrganization',
        :'registrant_email' => :'RegistrantEmail',
        :'registrant_street_number' => :'RegistrantStreetNumber',
        :'registrant_street' => :'RegistrantStreet',
        :'registrant_city' => :'RegistrantCity',
        :'registrant_state_or_province' => :'RegistrantStateOrProvince',
        :'registrant_postal_code' => :'RegistrantPostalCode',
        :'registrant_country' => :'RegistrantCountry',
        :'registrant_raw_address' => :'RegistrantRawAddress',
        :'registrant_telephone' => :'RegistrantTelephone',
        :'whois_server' => :'WhoisServer',
        :'raw_text_record' => :'RawTextRecord',
        :'created_dt' => :'CreatedDt'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'valid_domain' => :'BOOLEAN',
        :'registrant_name' => :'String',
        :'registrant_organization' => :'String',
        :'registrant_email' => :'String',
        :'registrant_street_number' => :'String',
        :'registrant_street' => :'String',
        :'registrant_city' => :'String',
        :'registrant_state_or_province' => :'String',
        :'registrant_postal_code' => :'String',
        :'registrant_country' => :'String',
        :'registrant_raw_address' => :'String',
        :'registrant_telephone' => :'String',
        :'whois_server' => :'String',
        :'raw_text_record' => :'String',
        :'created_dt' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ValidDomain')
        self.valid_domain = attributes[:'ValidDomain']
      end

      if attributes.has_key?(:'RegistrantName')
        self.registrant_name = attributes[:'RegistrantName']
      end

      if attributes.has_key?(:'RegistrantOrganization')
        self.registrant_organization = attributes[:'RegistrantOrganization']
      end

      if attributes.has_key?(:'RegistrantEmail')
        self.registrant_email = attributes[:'RegistrantEmail']
      end

      if attributes.has_key?(:'RegistrantStreetNumber')
        self.registrant_street_number = attributes[:'RegistrantStreetNumber']
      end

      if attributes.has_key?(:'RegistrantStreet')
        self.registrant_street = attributes[:'RegistrantStreet']
      end

      if attributes.has_key?(:'RegistrantCity')
        self.registrant_city = attributes[:'RegistrantCity']
      end

      if attributes.has_key?(:'RegistrantStateOrProvince')
        self.registrant_state_or_province = attributes[:'RegistrantStateOrProvince']
      end

      if attributes.has_key?(:'RegistrantPostalCode')
        self.registrant_postal_code = attributes[:'RegistrantPostalCode']
      end

      if attributes.has_key?(:'RegistrantCountry')
        self.registrant_country = attributes[:'RegistrantCountry']
      end

      if attributes.has_key?(:'RegistrantRawAddress')
        self.registrant_raw_address = attributes[:'RegistrantRawAddress']
      end

      if attributes.has_key?(:'RegistrantTelephone')
        self.registrant_telephone = attributes[:'RegistrantTelephone']
      end

      if attributes.has_key?(:'WhoisServer')
        self.whois_server = attributes[:'WhoisServer']
      end

      if attributes.has_key?(:'RawTextRecord')
        self.raw_text_record = attributes[:'RawTextRecord']
      end

      if attributes.has_key?(:'CreatedDt')
        self.created_dt = attributes[:'CreatedDt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          valid_domain == o.valid_domain &&
          registrant_name == o.registrant_name &&
          registrant_organization == o.registrant_organization &&
          registrant_email == o.registrant_email &&
          registrant_street_number == o.registrant_street_number &&
          registrant_street == o.registrant_street &&
          registrant_city == o.registrant_city &&
          registrant_state_or_province == o.registrant_state_or_province &&
          registrant_postal_code == o.registrant_postal_code &&
          registrant_country == o.registrant_country &&
          registrant_raw_address == o.registrant_raw_address &&
          registrant_telephone == o.registrant_telephone &&
          whois_server == o.whois_server &&
          raw_text_record == o.raw_text_record &&
          created_dt == o.created_dt
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [valid_domain, registrant_name, registrant_organization, registrant_email, registrant_street_number, registrant_street, registrant_city, registrant_state_or_province, registrant_postal_code, registrant_country, registrant_raw_address, registrant_telephone, whois_server, raw_text_record, created_dt].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudmersiveValidateApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
