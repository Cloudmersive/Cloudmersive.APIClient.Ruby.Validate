=begin
#validateapi

#The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module CloudmersiveValidateApiClient
  # IP address intelligence result
  class IPIntelligenceResponse
    # True if the IP address is a known bot, otherwise false
    attr_accessor :is_bot

    # True if the IP address is a known Tor exit node, otherwise false
    attr_accessor :is_tor_node

    # True if the IP address is a known threat IP, otherwise false
    attr_accessor :is_threat

    # True if the IP address is in the European Union, otherwise false
    attr_accessor :is_eu

    # Returns the location of the IP address
    attr_accessor :location

    # ISO 4217 currency code for the IP address location
    attr_accessor :currency_code

    # Name of the currency in English
    attr_accessor :currency_name

    # Region (continent) in which the country is located; possible values are None, Europe, Americas, Asia, Africa, Oceania
    attr_accessor :region_area

    # Subregion in which the country is located; possible values are None, NorthernEurope, WesternEurope, SouthernEurope, EasternEurope, CentralAmerica, NorthernAmerica, SouthAmerica, EasternAfrica, MiddleAfrica, NorthernAfrica , SouthernAfrica , WesternAfrica , CentralAsia , EasternAsia , SouthernAsia , SouthEasternAsia , WesternAsia , Southern , Middle , AustraliaandNewZealand , Melanesia , Polynesia , Micronesia , Caribbean,
    attr_accessor :subregion_area

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'is_bot' => :'IsBot',
        :'is_tor_node' => :'IsTorNode',
        :'is_threat' => :'IsThreat',
        :'is_eu' => :'IsEU',
        :'location' => :'Location',
        :'currency_code' => :'CurrencyCode',
        :'currency_name' => :'CurrencyName',
        :'region_area' => :'RegionArea',
        :'subregion_area' => :'SubregionArea'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'is_bot' => :'BOOLEAN',
        :'is_tor_node' => :'BOOLEAN',
        :'is_threat' => :'BOOLEAN',
        :'is_eu' => :'BOOLEAN',
        :'location' => :'GeolocateResponse',
        :'currency_code' => :'String',
        :'currency_name' => :'String',
        :'region_area' => :'String',
        :'subregion_area' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'IsBot')
        self.is_bot = attributes[:'IsBot']
      end

      if attributes.has_key?(:'IsTorNode')
        self.is_tor_node = attributes[:'IsTorNode']
      end

      if attributes.has_key?(:'IsThreat')
        self.is_threat = attributes[:'IsThreat']
      end

      if attributes.has_key?(:'IsEU')
        self.is_eu = attributes[:'IsEU']
      end

      if attributes.has_key?(:'Location')
        self.location = attributes[:'Location']
      end

      if attributes.has_key?(:'CurrencyCode')
        self.currency_code = attributes[:'CurrencyCode']
      end

      if attributes.has_key?(:'CurrencyName')
        self.currency_name = attributes[:'CurrencyName']
      end

      if attributes.has_key?(:'RegionArea')
        self.region_area = attributes[:'RegionArea']
      end

      if attributes.has_key?(:'SubregionArea')
        self.subregion_area = attributes[:'SubregionArea']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          is_bot == o.is_bot &&
          is_tor_node == o.is_tor_node &&
          is_threat == o.is_threat &&
          is_eu == o.is_eu &&
          location == o.location &&
          currency_code == o.currency_code &&
          currency_name == o.currency_name &&
          region_area == o.region_area &&
          subregion_area == o.subregion_area
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [is_bot, is_tor_node, is_threat, is_eu, location, currency_code, currency_name, region_area, subregion_area].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudmersiveValidateApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
