=begin
#validateapi

#The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module CloudmersiveValidateApiClient
  # Result of the lead enrichment process
  class LeadEnrichmentResponse
    # True if the operation was successful, false otherwise
    attr_accessor :successful

    # The type of the lead; possible types are Junk (a single individual using a disposable/throwaway email address); Individual (a single individual, typically a consumer, not purchasing on behalf of a business); SmallBusiness (a small business, typically with fewer than 100 employees); MediumBusiness (a medium business, larger than 100 employees but fewer than 1000 employees); Enterprise (a large business with greater than 1000 employees); Business (a business customer of unknown size)
    attr_accessor :lead_type

    # The person's business email address for the lead
    attr_accessor :contact_business_email

    # The person's first name for the lead
    attr_accessor :contact_first_name

    # The person's last name for the lead
    attr_accessor :contact_last_name

    # Gender for contact name; possible values are Male, Female, and Neutral (can be applied to Male or Female).  Requires ContactFirstName.
    attr_accessor :contact_gender

    # Name of the company for the lead
    attr_accessor :company_name

    # Domain name / website for the lead
    attr_accessor :company_domain_name

    # House number of the address of the company for the lead
    attr_accessor :company_house_number

    # Street name of the address of the company for the lead
    attr_accessor :company_street

    # City of the address of the company for the lead
    attr_accessor :company_city

    # State or Province of the address of the company for the lead
    attr_accessor :company_state_or_province

    # Postal Code of the address of the company for the lead
    attr_accessor :company_postal_code

    # Country Name of the address of the company for the lead
    attr_accessor :company_country

    # Country Code (2-letter ISO 3166-1) of the address of the company for the lead
    attr_accessor :company_country_code

    # Telephone of the company office for the lead
    attr_accessor :company_telephone

    # VAT number of the company for the lead
    attr_accessor :company_vat_number

    # Count of employees at the company (estimated), if available
    attr_accessor :employee_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'successful' => :'Successful',
        :'lead_type' => :'LeadType',
        :'contact_business_email' => :'ContactBusinessEmail',
        :'contact_first_name' => :'ContactFirstName',
        :'contact_last_name' => :'ContactLastName',
        :'contact_gender' => :'ContactGender',
        :'company_name' => :'CompanyName',
        :'company_domain_name' => :'CompanyDomainName',
        :'company_house_number' => :'CompanyHouseNumber',
        :'company_street' => :'CompanyStreet',
        :'company_city' => :'CompanyCity',
        :'company_state_or_province' => :'CompanyStateOrProvince',
        :'company_postal_code' => :'CompanyPostalCode',
        :'company_country' => :'CompanyCountry',
        :'company_country_code' => :'CompanyCountryCode',
        :'company_telephone' => :'CompanyTelephone',
        :'company_vat_number' => :'CompanyVATNumber',
        :'employee_count' => :'EmployeeCount'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'successful' => :'BOOLEAN',
        :'lead_type' => :'String',
        :'contact_business_email' => :'String',
        :'contact_first_name' => :'String',
        :'contact_last_name' => :'String',
        :'contact_gender' => :'String',
        :'company_name' => :'String',
        :'company_domain_name' => :'String',
        :'company_house_number' => :'String',
        :'company_street' => :'String',
        :'company_city' => :'String',
        :'company_state_or_province' => :'String',
        :'company_postal_code' => :'String',
        :'company_country' => :'String',
        :'company_country_code' => :'String',
        :'company_telephone' => :'String',
        :'company_vat_number' => :'String',
        :'employee_count' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'Successful')
        self.successful = attributes[:'Successful']
      end

      if attributes.has_key?(:'LeadType')
        self.lead_type = attributes[:'LeadType']
      end

      if attributes.has_key?(:'ContactBusinessEmail')
        self.contact_business_email = attributes[:'ContactBusinessEmail']
      end

      if attributes.has_key?(:'ContactFirstName')
        self.contact_first_name = attributes[:'ContactFirstName']
      end

      if attributes.has_key?(:'ContactLastName')
        self.contact_last_name = attributes[:'ContactLastName']
      end

      if attributes.has_key?(:'ContactGender')
        self.contact_gender = attributes[:'ContactGender']
      end

      if attributes.has_key?(:'CompanyName')
        self.company_name = attributes[:'CompanyName']
      end

      if attributes.has_key?(:'CompanyDomainName')
        self.company_domain_name = attributes[:'CompanyDomainName']
      end

      if attributes.has_key?(:'CompanyHouseNumber')
        self.company_house_number = attributes[:'CompanyHouseNumber']
      end

      if attributes.has_key?(:'CompanyStreet')
        self.company_street = attributes[:'CompanyStreet']
      end

      if attributes.has_key?(:'CompanyCity')
        self.company_city = attributes[:'CompanyCity']
      end

      if attributes.has_key?(:'CompanyStateOrProvince')
        self.company_state_or_province = attributes[:'CompanyStateOrProvince']
      end

      if attributes.has_key?(:'CompanyPostalCode')
        self.company_postal_code = attributes[:'CompanyPostalCode']
      end

      if attributes.has_key?(:'CompanyCountry')
        self.company_country = attributes[:'CompanyCountry']
      end

      if attributes.has_key?(:'CompanyCountryCode')
        self.company_country_code = attributes[:'CompanyCountryCode']
      end

      if attributes.has_key?(:'CompanyTelephone')
        self.company_telephone = attributes[:'CompanyTelephone']
      end

      if attributes.has_key?(:'CompanyVATNumber')
        self.company_vat_number = attributes[:'CompanyVATNumber']
      end

      if attributes.has_key?(:'EmployeeCount')
        self.employee_count = attributes[:'EmployeeCount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          successful == o.successful &&
          lead_type == o.lead_type &&
          contact_business_email == o.contact_business_email &&
          contact_first_name == o.contact_first_name &&
          contact_last_name == o.contact_last_name &&
          contact_gender == o.contact_gender &&
          company_name == o.company_name &&
          company_domain_name == o.company_domain_name &&
          company_house_number == o.company_house_number &&
          company_street == o.company_street &&
          company_city == o.company_city &&
          company_state_or_province == o.company_state_or_province &&
          company_postal_code == o.company_postal_code &&
          company_country == o.company_country &&
          company_country_code == o.company_country_code &&
          company_telephone == o.company_telephone &&
          company_vat_number == o.company_vat_number &&
          employee_count == o.employee_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [successful, lead_type, contact_business_email, contact_first_name, contact_last_name, contact_gender, company_name, company_domain_name, company_house_number, company_street, company_city, company_state_or_province, company_postal_code, company_country, company_country_code, company_telephone, company_vat_number, employee_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudmersiveValidateApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
