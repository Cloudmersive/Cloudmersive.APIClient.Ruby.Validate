=begin
#validateapi

#The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module CloudmersiveValidateApiClient
  class EmailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Partially check whether an email address is valid
    # Validate an email address by identifying whether its parent domain has email servers defined.  This call is less limited than syntaxOnly but not as comprehensive as address/full.
    # @param email Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.
    # @param [Hash] opts the optional parameters
    # @return [AddressGetServersResponse]
    def email_address_get_servers(email, opts = {})
      data, _status_code, _headers = email_address_get_servers_with_http_info(email, opts)
      data
    end

    # Partially check whether an email address is valid
    # Validate an email address by identifying whether its parent domain has email servers defined.  This call is less limited than syntaxOnly but not as comprehensive as address/full.
    # @param email Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressGetServersResponse, Fixnum, Hash)>] AddressGetServersResponse data, response status code and response headers
    def email_address_get_servers_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.email_address_get_servers ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling EmailApi.email_address_get_servers"
      end
      # resource path
      local_var_path = '/validate/email/address/servers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/javascript', 'application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddressGetServersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_address_get_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fully validate an email address
    # Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.
    # @param email Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.
    # @param [Hash] opts the optional parameters
    # @return [FullEmailValidationResponse]
    def email_full_validation(email, opts = {})
      data, _status_code, _headers = email_full_validation_with_http_info(email, opts)
      data
    end

    # Fully validate an email address
    # Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.
    # @param email Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FullEmailValidationResponse, Fixnum, Hash)>] FullEmailValidationResponse data, response status code and response headers
    def email_full_validation_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.email_full_validation ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling EmailApi.email_full_validation"
      end
      # resource path
      local_var_path = '/validate/email/address/full'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/javascript', 'application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FullEmailValidationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_full_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate email adddress for syntactic correctness only
    # Validate whether a given email address is syntactically correct via a limited local-only check.  Use the address/full API to do a full validation.
    # @param value Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.
    # @param [Hash] opts the optional parameters
    # @return [AddressVerifySyntaxOnlyResponse]
    def email_post(value, opts = {})
      data, _status_code, _headers = email_post_with_http_info(value, opts)
      data
    end

    # Validate email adddress for syntactic correctness only
    # Validate whether a given email address is syntactically correct via a limited local-only check.  Use the address/full API to do a full validation.
    # @param value Email address to validate, e.g. \&quot;support@cloudmersive.com\&quot;.    The input is a string so be sure to enclose it in double-quotes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressVerifySyntaxOnlyResponse, Fixnum, Hash)>] AddressVerifySyntaxOnlyResponse data, response status code and response headers
    def email_post_with_http_info(value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.email_post ...'
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling EmailApi.email_post"
      end
      # resource path
      local_var_path = '/validate/email/address/syntaxOnly'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/javascript', 'application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(value)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddressVerifySyntaxOnlyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
