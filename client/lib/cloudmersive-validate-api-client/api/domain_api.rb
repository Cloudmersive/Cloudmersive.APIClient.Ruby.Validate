=begin
#validateapi

#The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module CloudmersiveValidateApiClient
  class DomainApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Validate a domain name
    # Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
    # @param domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.
    # @param [Hash] opts the optional parameters
    # @return [CheckResponse]
    def domain_check(domain, opts = {})
      data, _status_code, _headers = domain_check_with_http_info(domain, opts)
      return data
    end

    # Validate a domain name
    # Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
    # @param domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckResponse, Fixnum, Hash)>] CheckResponse data, response status code and response headers
    def domain_check_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DomainApi.domain_check ..."
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DomainApi.domain_check"
      end
      # resource path
      local_var_path = "/validate/domain/check"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(domain)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CheckResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainApi#domain_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get WHOIS information for a domain
    # Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain's owners.
    # @param domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.
    # @param [Hash] opts the optional parameters
    # @return [WhoisResponse]
    def domain_post(domain, opts = {})
      data, _status_code, _headers = domain_post_with_http_info(domain, opts)
      return data
    end

    # Get WHOIS information for a domain
    # Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
    # @param domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhoisResponse, Fixnum, Hash)>] WhoisResponse data, response status code and response headers
    def domain_post_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DomainApi.domain_post ..."
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DomainApi.domain_post"
      end
      # resource path
      local_var_path = "/validate/domain/whois"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(domain)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhoisResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainApi#domain_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
