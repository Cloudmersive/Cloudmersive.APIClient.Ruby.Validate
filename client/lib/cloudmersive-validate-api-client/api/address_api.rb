=begin
#validateapi

#The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module CloudmersiveValidateApiClient
  class AddressApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Validate and normalize country information, return ISO 3166-1 country codes and country name
    # Validates and normalizes country information, and returns key information about a country.  Also returns distinct time zones in the country.
    # @param input Input request
    # @param [Hash] opts the optional parameters
    # @return [ValidateCountryResponse]
    def address_country(input, opts = {})
      data, _status_code, _headers = address_country_with_http_info(input, opts)
      return data
    end

    # Validate and normalize country information, return ISO 3166-1 country codes and country name
    # Validates and normalizes country information, and returns key information about a country.  Also returns distinct time zones in the country.
    # @param input Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidateCountryResponse, Fixnum, Hash)>] ValidateCountryResponse data, response status code and response headers
    def address_country_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AddressApi.address_country ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling AddressApi.address_country"
      end
      # resource path
      local_var_path = "/validate/address/country"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidateCountryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#address_country\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets IANA/Olsen time zones for a country
    # Gets the IANA/Olsen time zones for a country.
    # @param input Input request
    # @param [Hash] opts the optional parameters
    # @return [GetTimezonesResponse]
    def address_get_timezone(input, opts = {})
      data, _status_code, _headers = address_get_timezone_with_http_info(input, opts)
      return data
    end

    # Gets IANA/Olsen time zones for a country
    # Gets the IANA/Olsen time zones for a country.
    # @param input Input request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTimezonesResponse, Fixnum, Hash)>] GetTimezonesResponse data, response status code and response headers
    def address_get_timezone_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AddressApi.address_get_timezone ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling AddressApi.address_get_timezone"
      end
      # resource path
      local_var_path = "/validate/address/country/get-timezones"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTimezonesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#address_get_timezone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Parse an unstructured input text string into an international, formatted address
    # Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
    # @param input Input parse request
    # @param [Hash] opts the optional parameters
    # @return [ParseAddressResponse]
    def address_parse_string(input, opts = {})
      data, _status_code, _headers = address_parse_string_with_http_info(input, opts)
      return data
    end

    # Parse an unstructured input text string into an international, formatted address
    # Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
    # @param input Input parse request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ParseAddressResponse, Fixnum, Hash)>] ParseAddressResponse data, response status code and response headers
    def address_parse_string_with_http_info(input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AddressApi.address_parse_string ..."
      end
      # verify the required parameter 'input' is set
      if @api_client.config.client_side_validation && input.nil?
        fail ArgumentError, "Missing the required parameter 'input' when calling AddressApi.address_parse_string"
      end
      # resource path
      local_var_path = "/validate/address/parse"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input)
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParseAddressResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#address_parse_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
